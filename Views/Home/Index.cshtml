@using ZwiftTelemetryBrowserSource.Models
@model ZonesModel;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<html>
    <head>
        <meta charset="UTF-8">
        <script src="~/js/circletype.min.js"></script>
        <script src="~/js/gauge.min.js"></script>
        <script src="~/js/jquery.min.js"></script>
        <style>
            .wrapper {
                position: relative;
                display: inline-block;
                margin-bottom:-30px;
            }

            .text {
                position: absolute;
                text-align: center;
                width: 100%;
                line-height: 150px;
                top: 35px;
                font-size: 18px;
                font-family: tahoma;
                font-weight: 800;
                color: white;
                z-index:-10;
            }

            #gray-circle {
                background: #778899;
                border-radius: 50%;
                width: 240px;
                height: 240px;
                z-index: -90;
                position: absolute;
                top: 15px;
                left: 70px;
            }

            #black-circle {
                background: black;
                border-radius: 50%;
                width: 242px;
                height: 242px;
                z-index: -99;
                position: absolute;
                top: 14px;
                left: 69px;
            }

            .line{
                width: 240px;
                height: 47px;
                border-bottom: 1px solid black;
                position: absolute;
                z-index: 99;
                top: 88px;
                left: 70px;
            }
            
            canvas {
                position: relative;
                z-index: -10;
            }

            body {
                background-color: rgba(255,255,255,0);
                margin: 0px;
            }
        </style>
    </head>
    <body>
        <div style="width:400px">
            <div id="black-circle"></div>
            <div id="gray-circle"></div>
            <div class="line"></div>
            <div id="power" class="wrapper">
                <div id="power-label" class="text">Power</div>
                <canvas width="380" height="150" id="power-gauge-canvas"></canvas>
            </div>
            <div id="hr" class="wrapper" style="transform: rotate(180deg) scaleX(-1);">
                <div id="hr-label" class="text" style="transform: rotate(180deg) scaleX(-1);">Heart Rate</div>        
                <canvas width="380" height="150" id="hr-gauge-canvas"></canvas>
            </div>
        </div>
    </body>

    <script>
        var powerOpts = {
            angle: 0, /// The span of the gauge arc
            lineWidth: 0.44, // The line thickness
            pointer: {
                length: 0.6, // Relative to gauge radius
                strokeWidth: 0.035 // The thickness
            },
            colorStart: '#6FADCF',
            colorStop: '#8FC0DA',
            strokeColor: '#E0E0E0',
            staticZones: [
                {strokeStyle: "#30B32D", min: 0, max: @Model.Power.Z1}, //Green
                {strokeStyle: "#FFDD00", min: @(Model.Power.Z1 + 1), max: @Model.Power.Z2}, // Yellow
                {strokeStyle: "#FFA500", min: @(Model.Power.Z2 + 1), max: @Model.Power.Z3}, // Orange
                {strokeStyle: "#FF4500", min: @(Model.Power.Z3 + 1), max: @Model.Power.Z4},  // Orange Red
                {strokeStyle: "#F03E3E", min: @(Model.Power.Z4 + 1), max: @Model.Power.Z5},  // Red
                {strokeStyle: "#8B0000", min: @(Model.Power.Z5 + 1), max: @Model.Power.Z6},  // Red
                {strokeStyle: "#800000", min: @(Model.Power.Z6 + 1), max: @Model.Power.Z7}  // Maroon
            ],
        };

        var power = document.getElementById('power-gauge-canvas'); // your canvas element
        var powerGauge = new Gauge(power).setOptions(powerOpts); // create sexy gauge!
        powerGauge.maxValue = @Model.Power.Z7; // set max gauge value
        powerGauge.setMinValue(0);  // set min value
        powerGauge.animationSpeed = 10;
        powerGauge.set(0); // set actual value

        // ---------------------------------------

        var hrOpts = {
            angle: 0, /// The span of the gauge arc
            lineWidth: 0.44, // The line thickness
            pointer: {
                length: 0.6, // Relative to gauge radius
                strokeWidth: 0.035 // The thickness
            },
            colorStart: '#6FADCF',
            colorStop: '#8FC0DA',
            strokeColor: '#E0E0E0',
            staticZones: [
                {strokeStyle: "#30B32D", min: 0, max: @Model.HR.Z1}, //Green
                {strokeStyle: "#FFDD00", min: @(Model.HR.Z1 + 1), max: @Model.HR.Z2}, // Yellow
                {strokeStyle: "#FFA500", min: @(Model.HR.Z2 + 1), max: @Model.HR.Z3}, // Orange
                {strokeStyle: "#FF4500", min: @(Model.HR.Z3 + 1), max: @Model.HR.Z4},  // Orange Red
                {strokeStyle: "#800000", min: @(Model.HR.Z4 + 1), max: @Model.HR.Z5}  // Red
            ],
        };

        var hr = document.getElementById('hr-gauge-canvas'); // your canvas element
        var hrGauge = new Gauge(hr).setOptions(hrOpts); // create sexy gauge!
        hrGauge.maxValue = @Model.HR.Z5; // set max gauge value
        hrGauge.setMinValue(0);  // set min value
        hrGauge.animationSpeed = 10;
        hrGauge.set(0); // set actual value

        // ---------------------------------------

        window.setInterval(function() { RefreshData(); }, 500);

        function RefreshData()
        {
            $.ajax({
                type: "GET",
                url: "/Home/API",
                async: true,
                success: function(result) { 
                    powerGauge.set(result.power); 
                    hrGauge.set(result.heartRate); 
                },
                error: function() { 
                    powerGauge.set(0); 
                    hrGauge.set(0); 
                },
            });
        }
    </script>
</html>